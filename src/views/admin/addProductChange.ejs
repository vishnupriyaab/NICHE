<%- include('include/_header') %>


    <style>
        .image-container {
            display: inline-block;
            margin-right: 10px;
            /* Add some margin between images */
            position: relative;
        }

        .image-container img:hover {
            filter: grayscale(100%);
        }

        .change-img-text {
            display: none;
        }

        .image-container img:hover .change-img-text {
            display: block;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.7);
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 12px;
            color: #ff0000;
        }

        .edit-icon {
            position: absolute;
            top: 5px;
            right: 5px;
            cursor: pointer;
            color: white;
            background-color: black;
            border-radius: 50%;
            padding: 5px;
        }
    </style>


    <section class="content-main">
        <div class="row">
            <div class="row-auto">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="row-lg-6">
                <div class="card mb-4">
                    <div class="card-header">
                        <h4>Product Details</h4>
                    </div>
                    <div>
                        <h2 class="text-danger" id="errorContainer"></h2>
                    </div>
                    <div class="card-body">
                        <form action="/addproduct" id="addProductForm" method="post" enctype="multipart/form-data">

                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productname" class="form-control"
                                    id="productname">
                                <div>
                                    <h2 class="text-danger" id="errorName"></h2>
                                </div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Description</label>
                                <textarea placeholder="Type here" name="description" class="form-control" rows="4"
                                    id="description"></textarea>
                                <div>
                                    <h2 class="text-danger" id="errorDescription"></h2>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4" style="width: 50%;">

                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <div class="row gx-2">
                                            <input placeholder="Type here" name="color" type="text" class="form-control"
                                                id="color" />
                                            <div>
                                                <h2 class="text-danger" id="errorColor"></h2>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4" style="width: 50%;">
                                    <div class="mb-4">
                                        <label class="form-label">Size</label>
                                        <div class="row gx-2">
                                            <select class="form-select" name="size" id="size">
                                                <option value="3">3</option>
                                                <option value="4">4</option>
                                                <option value="5">5</option>
                                                <option value="6">6</option>
                                                <option value="6">7</option>
                                                <option value="6">8</option>
                                            </select>
                                            <div>
                                                <h2 class="text-danger" id="errorSize"></h2>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4" style="width: 50%;">
                                    <div class="mb-4">
                                        <label class="form-label">Price</label>
                                        <div class="row gx-2">
                                            <input placeholder="â‚¹" name="price" type="number" class="form-control"
                                                id="price" />
                                            <div>
                                                <h2 class="text-danger" id="errorPrice"></h2>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4" style="width: 50%;">
                                    <div class="mb-4">
                                        <label class="form-label">Stock</label>
                                        <div class="row gx-2">
                                            <input placeholder="0" type="number" name="stock" class="form-control"
                                                id="stock" />
                                            <div>
                                                <h2 class="text-danger" id="errorStock"></h2>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row-lg-2">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h4>Media</h4>
                                    </div>
                                    <div class="card-body">
                                        <div class=" mb-4">
                                            <label class="form-label">Upload Images: </label>
                                            <div>
                                                <h2 class="text-danger" id="errorImage"></h2>
                                            </div>
                                            <input name="images" class="form-control" type="file" id="Image" multiple />
                                        </div>
                                        <div id="imagePreviewContainer" class="mb-4"></div>
                                    </div>

                                    <div class="card mb-4">
                                        <div class="card-header">
                                            <h4>Category</h4>
                                        </div>
                                        <div class="card-body">
                                            <select class="form-select" name="category" id="category">
                                                <% for (let i of category) { %>
                                                    <option value="<%= i._id %>">
                                                        <%= i.name %>
                                                    </option>
                                                    <% } %>
                                            </select>
                                        </div>
                                        <div>
                                            <h2 class="text-danger" id="errorCategory"></h2>
                                        </div>
                                    </div>
                                </div>
                                <div class="justify-content-center">
                                    <button class="btn btn-md rounded font-sm hover-up submit" type="submit">Add
                                        Product</button>
                                </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        </div>
    </section>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.5/axios.min.js"
        integrity="sha512-TjBzDQIDnc6pWyeM1bhMnDxtWH0QpOXMcVooglXrali/Tj7W569/wd4E8EDjk1CwOAOPSJon1VfcEt1BI4xIrA=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.js"></script>


    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const addProductForm = document.getElementById("addProductForm");

            const inputs = {
                productname: document.getElementById("productname"),
                description: document.getElementById("description"),
                color: document.getElementById("color"),
                size: document.getElementById("size"),
                price: document.getElementById("price"),
                stock: document.getElementById("stock"),
                category: document.getElementById("category"),
                Image: document.getElementById("Image")
            };

            const errorMessages = {
                productname: document.getElementById('errorName'),
                description: document.getElementById('errorDescription'),
                color: document.getElementById('errorColor'),
                size: document.getElementById('errorSize'),
                price: document.getElementById('errorPrice'),
                stock: document.getElementById('errorStock'),
                category: document.getElementById('errorCategory'),
                Image: document.getElementById('errorImage')
            };

            const validateProductName = (input, errorMessage) => {
                const value = input.value;
                if (!value) {
                    errorMessage.innerHTML = '<p>name field is required</p>';
                    return false;
                } else if (value.length > 30) {
                    errorMessage.innerHTML = '<p>Product Name should be almost 30 characters long</p>';
                    return false;
                } else if (/^\s*$/.test(value)) {
                    errorMessage.innerHTML = '<p>Product Name cannot be only spaces</p>';
                    return false;
                } else if (!/^[a-zA-Z\s]+$/.test(value)) {
                    errorMessage.innerHTML = '<p>Product Name cannot contain numbers or special characters</p>';
                    return false;
                } else {
                    errorMessage.innerHTML = '';
                    return true;
                }
            };

            const validateDescription = (input, errorMessage) => {
                const value = input.value;
                if (!value) {
                    errorMessage.innerHTML = '<p>description field is required</p>';
                    return false;
                } else if (value.length > 30) {
                    errorMessage.innerHTML = '<p>Description cannot exceed 30 characters</p>';
                    return false;
                } else if (/^\s*$/.test(value)) {
                    errorMessage.innerHTML = '<p>Description cannot be fully spaces</p>';
                    return false;
                } else {
                    errorMessage.innerHTML = '';
                    return true;
                }
            };
            const validateColor = (input, errorMessage) => {
                const value = input.value;
                if (!value) {
                    errorMessage.innerHTML = '<p>Color field is required</p>';
                    return false;
                } else if (/^\s*$/.test(value)) {
                    errorMessage.innerHTML = '<p>Color cannot be fully spaces</p>';
                    return false;
                } else {
                    errorMessage.innerHTML = '';
                    return true;
                }
            };
            const validatePrice = (input, errorMessage) => {
                const value = input.value;
                const numericValue = parseFloat(value);
                // console.log(numericValue, "numberic");
                if (!value) {
                    errorMessage.innerHTML = '<p>Price field is required</p>';
                    return false;
                } else if (isNaN(numericValue)) {
                    errorMessage.innerHTML = '<p>Price must be a valid number</p>';
                    return false;
                } else if (numericValue < 0 || numericValue > 10000) {
                    errorMessage.innerHTML = '<p>Price must be between 0 and 10000</p>';
                    return false;
                } else {
                    errorMessage.innerHTML = '';
                    return true;
                }
            };
            const validateStock = (input, errorMessage) => {
                const value = input.value;
                const numericValue = parseFloat(value);
                console.log(numericValue, "numberic");
                if (!value) {
                    errorMessage.innerHTML = '<p>Stock field is required</p>';
                    return false;
                } else if (isNaN(numericValue)) {
                    errorMessage.innerHTML = '<p>Stock must be a valid number</p>';
                    return false;
                } else if (numericValue < 0 || numericValue > 1000) {
                    errorMessage.innerHTML = '<p>Stock must be between 0 and 1000</p>';
                    return false;
                } else {
                    errorMessage.innerHTML = '';
                    return true;
                }
            };


            const validateImage = (input, errorMessage) => {
                const files = input.files;
                console.log(files.length,"qwertyuiop");
                const maxFileSize = 5 * 1024 * 1024; // 5MB
                const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
                const maxFiles = 3

                if (files.length > maxFiles) {
                    errorMessage.innerHTML = `<p>Only ${maxFiles} images are allowed</p>`;
                    return false;
                }
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    if (!allowedTypes.includes(file.type)) {
                        errorMessage.innerHTML = '<p>Only JPEG, PNG, and GIF images are allowed</p>';
                        return false;
                    }
                    if (file.size > maxFileSize) {
                        errorMessage.innerHTML = '<p>File size exceeds the limit (5MB)</p>';
                        return false;
                    }
                }
                errorMessage.innerHTML = '';
                return true;
            };

            for (let key in inputs) {
                const input = inputs[key];
                const errorMessage = errorMessages[key];
                input.addEventListener('input', () => {
                    switch (key) {
                        case 'productname':
                            validateProductName(input, errorMessage);
                            break;
                        case 'description':
                            validateDescription(input, errorMessage);
                            break;
                        case 'color':
                            validateColor(input, errorMessage);
                            break;
                        case 'price':
                            validatePrice(input, errorMessage);
                            break;
                        case 'stock':
                            validateStock(input, errorMessage);
                            break;
                        case 'Image':
                            validateImage(input, errorMessage);
                            break;

                    }
                });
            }
            addProductForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                let isValid = true;
                for (let key in inputs) {
                    const input = inputs[key];
                    const errorMessage = errorMessages[key];
                    switch (key) {
                        case 'productname':
                            if (!validateProductName(input, errorMessage)) isValid = false;
                            break;
                        case 'description':
                            if (!validateDescription(input, errorMessage)) isValid = false;
                            break;
                        case 'color':
                            if (!validateColor(input, errorMessage)) isValid = false;
                            break;
                        case 'price':
                            if (!validatePrice(input, errorMessage)) isValid = false;
                            break;
                        case 'stock':
                            if (!validateStock(input, errorMessage)) isValid = false;
                            break;
                        case 'Image':
                            if (!validateImage(input, errorMessage)) isValid = false;
                            break;

                    }
                }

                if (isValid) {
                    let imgArr = []
                    for (let i = 0; i < inputs.Image.files.length; i++) {
                        imgArr[i] = await convertBase64(inputs.Image.files[i]);
                    }

                    const formData = {
                        name: productname.value,
                        description: description.value,
                        price: price.value,
                        color: color.value,
                        size: size.value,
                        stock: stock.value,
                        category: category.value,
                        imgArr: imgArr // Pass the array of base64 images
                    };
                    console.log(formData);

                    axios.post("/addproduct", formData)
                        .then(({ data }) => {
                            if (data) {
                                Swal.fire("Product Added", "Click the button", "success").then(() => {
                                    window.location.href = '/products';
                                });
                            }
                        })
                        .catch((error) => {
                            console.log(error);
                        })
                }
            });

            function convertBase64(file) {
                return new Promise((resolve, reject) => {
                    const fileReader = new FileReader();
                    fileReader.readAsDataURL(file);
                    fileReader.onload = () => {
                        resolve(fileReader.result);
                    };
                    fileReader.onerror = (error) => {
                        reject(error);
                    };
                });
            }
        }
        );
    </script>


    <script>
        const imageInput = document.getElementById("Image");
        const previewContainer = document.getElementById("imagePreviewContainer");
        let imageUrls = [];
        function createCropper(img, file) {
            console.log('create cropper event started')
            const cropper = new Cropper(img, {
                aspectRatio: 1,
                viewMode: 1,
                zoomable: true,
            });
            return function (idx) {
                previewContainer.innerHTML = "";
                const canvas = cropper.getCroppedCanvas();
                canvas.toBlob(async (blob) => {
                    const croppedFile = new File([blob], file.name, { type: file.type });
                    imageUrls.splice(idx, 1, croppedFile);
                    await resetPreview(imageUrls);
                    updateImageInputFiles();
                });
            };
        }

        imageInput.addEventListener("change", async (e) => {
            const files = e.target.files;
            if (files) {
                await resetPreview(files, true)
            }
        });

        async function resetPreview(files, inputEvent = false) {
            await [...files].forEach((file, index) => {
                if (file.type.startsWith('image/')) { // Check if it's an image
                    const reader = new FileReader();
                    reader.onload = () => {
                        const imgContainer = document.createElement("div");
                        imgContainer.classList.add("image-container");

                        const img = document.createElement("img");
                        img.src = reader.result;
                        img.classList.add("preview-image");
                        img.onload = () => {
                            if (img.width > 150 || img.height > 150) {
                                if (img.width > img.height) {
                                    img.style.width = "150px";
                                    img.style.height = "auto";
                                } else {
                                    img.style.height = "150px";
                                    img.style.width = "auto";
                                }
                            }
                        };

                        let urlIndex;
                        if (inputEvent) {
                            urlIndex = imageUrls.push(file) - 1;
                        } else {
                            urlIndex = index;
                        }

                        updateImageInputFiles();
                        imgContainer.dataset.index = urlIndex;

                        const editIcon = document.createElement("i");
                        editIcon.classList.add("fas", "fa-edit", "edit-icon");
                        editIcon.setAttribute("aria-hidden", "true");
                        const submitBtn = document.createElement("button");
                        submitBtn.classList.add("d-none");
                        editIcon.addEventListener("click", (event) => {
                            submitBtn.classList.remove('d-none')
                            // Check if cropper already exists
                            if (!img.dataset.cropperInitialized) {
                                const cropper = createCropper(img, file);
                                submitBtn.addEventListener('click', (e) => {
                                    e.preventDefault();
                                    cropper(urlIndex);
                                });
                                img.dataset.cropperInitialized = true;
                            }
                        });

                        const actionDiv = document.createElement('div');
                        actionDiv.classList.add("d-flex", "justify-content-between");
                        const deleteIcon = document.createElement("i");
                        deleteIcon.classList.add("fas", "fa-trash", "delete-icon");
                        deleteIcon.setAttribute("aria-hidden", "true");
                        submitBtn.type = "button";
                        submitBtn.textContent = "Crop"
                        submitBtn.style.backgroundColor = "black";
                        submitBtn.style.color = "white";
                        submitBtn.style.borderRadius = "5px";


                        deleteIcon.addEventListener("click", (event) => {
                            const urlIndex = parseInt(imgContainer.dataset.index);
                            if (!isNaN(urlIndex)) {
                                imageUrls.splice(urlIndex, 1);
                                imgContainer.remove();
                                updateImageInputFiles();
                            }
                        })

                        imgContainer.appendChild(img);
                        imgContainer.appendChild(editIcon);
                        actionDiv.appendChild(deleteIcon);
                        actionDiv.appendChild(submitBtn);
                        imgContainer.appendChild(actionDiv);

                        previewContainer.appendChild(imgContainer);
                    };
                    reader.readAsDataURL(file);
                }
            });
        }
        function updateImageInputFiles() {
            imageInput.value = "";
            const dataTransfer = new DataTransfer();
            imageUrls.forEach(file => {
                dataTransfer.items.add(file);
            });
            imageInput.files = dataTransfer.files;
        }

    </script>


    <%- include('include/_footer') %>