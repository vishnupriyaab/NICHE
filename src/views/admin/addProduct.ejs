<%#- include('include/_header') %>

<!-- 
    <style>
        .image-container {
            display: inline-block;
            margin-right: 10px;
            /* Add some margin between images */
            position: relative;
        }

        .image-container img:hover {
            filter: grayscale(100%);
        }

        .change-img-text {
            display: none;
        }

        .image-container img:hover .change-img-text {
            display: block;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.7);
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 12px;
            color: #ff0000;
        }

        .edit-icon {
            position: absolute;
            top: 5px;
            right: 5px;
            cursor: pointer;
            color: white;
            background-color: black;
            border-radius: 50%;
            padding: 5px;
        }
    </style>


    <section class="content-main">
        <div class="row">
            <div class="row-auto">
                <div class="content-header">
                    <h2 class="content-title">Add New Product</h2>
                </div>
            </div>
            <div class="row-lg-6">
                <div class="card mb-4">
                    <div class="card-header">
                        <h4>Product Details</h4>
                    </div>
                    <div>
                        <h2 class="text-danger" id="errorContainer"></h2>
                    </div>
                    <div class="card-body">
                        <form action="/addproduct" id="addProductForm" method="post" enctype="multipart/form-data">

                            <div class="mb-4">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productname" class="form-control"
                                    id="productname">
                                <div>
                                    <h2 class="text-danger" id="errorName"></h2>
                                </div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Description</label>
                                <textarea placeholder="Type here" name="description" class="form-control" rows="4"
                                    id="description"></textarea>
                                <div>
                                    <h2 class="text-danger" id="errorDescription"></h2>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4" style="width: 50%;">

                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <div class="row gx-2">
                                            <input placeholder="Type here" name="color" type="text" class="form-control"
                                                id="color" />
                                            <div>
                                                <h2 class="text-danger" id="errorColor"></h2>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4" style="width: 50%;">
                                    <div class="mb-4">
                                        <label class="form-label">Size</label>
                                        <div class="row gx-2">
                                            <select class="form-select" name="size" id="size">
                                                <option value="3">3</option>
                                                <option value="4">4</option>
                                                <option value="5">5</option>
                                                <option value="6">6</option>
                                                <option value="6">7</option>
                                                <option value="6">8</option>
                                            </select>
                                            <div>
                                                <h2 class="text-danger" id="errorSize"></h2>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-lg-4" style="width: 50%;">
                                    <div class="mb-4">
                                        <label class="form-label">Price</label>
                                        <div class="row gx-2">
                                            <input placeholder="â‚¹" name="price" type="number" class="form-control"
                                                id="price" />
                                            <div>
                                                <h2 class="text-danger" id="errorPrice"></h2>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4" style="width: 50%;">
                                    <div class="mb-4">
                                        <label class="form-label">Stock</label>
                                        <div class="row gx-2">
                                            <input placeholder="0" type="number" name="stock" class="form-control"
                                                id="stock" />
                                            <div>
                                                <h2 class="text-danger" id="errorStock"></h2>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row-lg-2">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <h4>Media</h4>
                                    </div>
                                    <div class="card-body">
                                        <div class=" mb-4">
                                            <label class="form-label">Upload Images: </label>
                                            <div>
                                                <h2 class="text-danger" id="errorImage"></h2>
                                            </div>
                                            <input name="images" class="form-control" type="file" id="Image" multiple />
                                        </div>
                                        <div id="imagePreviewContainer" class="mb-4"></div>
                                    </div>

                                    <div class="card mb-4">
                                        <div class="card-header">
                                            <h4>Category</h4>
                                        </div>
                                        <div class="card-body">
                                            <select class="form-select" name="category" id="category">
                                                <% for (let i of category) { %>
                                                    <option value="<%= i._id %>">
                                                        <%= i.name %>
                                                    </option>
                                                    <% } %>
                                            </select>
                                        </div>
                                        <div>
                                            <h2 class="text-danger" id="errorCategory"></h2>
                                        </div>
                                    </div>
                                </div>
                                <div class="justify-content-center">
                                    <button class="btn btn-md rounded font-sm hover-up submit" type="submit">Add
                                        Product</button>
                                </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        </div>
    </section>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.5/axios.min.js"
        integrity="sha512-TjBzDQIDnc6pWyeM1bhMnDxtWH0QpOXMcVooglXrali/Tj7W569/wd4E8EDjk1CwOAOPSJon1VfcEt1BI4xIrA=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="path/to/cropper.js"></script>
    <link href="path/to/cropper.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.6.2/cropper.min.js"></script>


    <script>
        document.querySelector('.submit').addEventListener('click', () => {
            document.querySelector('#form').submit();
        });

        // JavaScript for custom validation
        document.getElementById('addProductForm').addEventListener('submit', function (event) {
            const form = event.target;

            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
            }

            form.classList.add('was-validated');
        });

        const addProductForm = document.getElementById("addProductForm");
        const productname = document.getElementById("productname");
        const description = document.getElementById("description");
        const color = document.getElementById("color");
        const size = document.getElementById("size");
        const price = document.getElementById("price");
        const stock = document.getElementById("stock");
        const category = document.getElementById("category");
        const Image = document.getElementById("Image");
        console.log(color,size,"sdfghjk");

        addProductForm.addEventListener("submit", async (e) => {
            e.preventDefault();

            let imgArr = []
            for (let i = 0; i < Image.files.length; i++) {
                imgArr[i] = await convertBase64(Image.files[i]);
            }

            const formData = {
                name: productname.value,
                description: description.value,
                price: price.value,
                color: color.value,
                size: size.value,
                stock: stock.value,
                category: category.value,
                imgArr: imgArr // Pass the array of base64 images
            };
            console.log(formData);

            axios.post("/addproduct", formData)
                .then(({ data }) => {
                    if (data) {
                        Swal.fire("Product Added", "Click the button", "success").then(() => {
                            window.location.href = '/products';
                        });
                    }
                })
                .catch((error) => {
                    console.log(error);
                })
        });

        function convertBase64(file) {
            return new Promise((resolve, reject) => {
                const fileReader = new FileReader();
                fileReader.readAsDataURL(file);
                fileReader.onload = () => {
                    resolve(fileReader.result);
                };
                fileReader.onerror = (error) => {
                    reject(error);
                };
            });
        }

        document.getElementById('addProductForm').addEventListener('submit', function (event) {
            const errorContainer = document.getElementById('errorContainer');
            const errorName = document.getElementById('errorName');
            const errorDescription = document.getElementById('errorDescription');
            const errorPrice = document.getElementById('errorPrice');
            const errorStock = document.getElementById('errorStock');
            const errorImage = document.getElementById('errorImage');
            const errorCategory = document.getElementById('errorCategory');
            // const errorColor = document.getElementById('errorColor');
            errorContainer.innerHTML = '';
            errorName.innerHTML = '';
            errorDescription.innerHTML = '';
            errorPrice.innerHTML = '';
            errorStock.innerHTML = '';
            errorImage.innerHTML = '';
            errorCategory.innerHTML = '';
            errorColor.innerHTML = '';
            errorSize.innerHTML = '';

            // Validate form fields (You can also use HTML5 validation attributes)
            const name = productname.value;
            const desc = description.value;
            const pricevalue = price.value;
            const stockvalue = stock.value;
            const color = color.value;
            const size = size.value;
            const cat = category.value;
            const imgArr = Image.value;


            if (!name || !desc || !pricevalue || !stockvalue || !cat || !imgArr || !color || !size) {
                errorContainer.innerHTML = '<p>All fields are required</p>';
                event.preventDefault();
                return;
            }

            if (!name.trim()) {
                errorName.innerHTML = '<p>Product Name is required</p>';
                event.preventDefault();
            } else if (name.trim().length < 3) {
                errorName.innerHTML = '<p>Product Name should be at least 3 characters long</p>';
                event.preventDefault();
            }

            console.log("Description:", desc);
            if (!desc.trim()) {
                errorDescription.innerHTML = '<p>Description is required</p>';
                event.preventDefault();
            } else if (/^\s*$/.test(desc)) {
                console.log("Description has only spaces");
                errorDescription.innerHTML = '<p>Description cannot be fully spaces</p>';
                event.preventDefault();
            }

            console.log(color,"colorrrrrrr");
            if(!color.trim()){
                errorColor.innerHTML = '<p>qawsdefrgthykldcfvgbhnjkm,</p>';
                event.preventDefault();
            }

            if(!color.trim()){
                errorColor.innerHTML = '<p>Color is required</p>';
                event.preventDefault();
            } else if (/^\s*$/.test(color)) {
                console.log("Description has only spaces");
                errorColor.innerHTML = '<p>Description cannot be fully spaces</p>';
                event.preventDefault();
            }

            if (!pricevalue.trim()) {
                errorPrice.innerHTML = '<p>Price is required</p>';
                event.preventDefault();
            } else if (isNaN(pricevalue.trim()) || parseFloat(pricevalue.trim()) <= 0) {
                errorPrice.innerHTML = '<p>Price must be a valid positive number</p>';
                event.preventDefault();
            }

            if (!stockvalue.trim()) {
                errorStock.innerHTML = '<p>Stock is required</p>';
                event.preventDefault();
            } else if (isNaN(stockvalue.trim()) || parseInt(stockvalue.trim()) < 0) {
                errorStock.innerHTML = '<p>Stock must be a valid non-negative integer</p>';
                event.preventDefault();
            }

            if (!cat.trim()) {
                errorCategory.innerHTML = '<p>Category is required</p>';
                event.preventDefault();
            }

            if (!imgArr || imgArr.length === 0) {
                errorImage.innerHTML = '<p>Image is required</p>';
                event.preventDefault();
            }

        });
    </script>

    <script>
        const imageInput = document.getElementById("Image");
        const previewContainer = document.getElementById("imagePreviewContainer");
        let imageUrls = [];
        function createCropper(img, file) {
            console.log('create cropper event started')
            const cropper = new Cropper(img, {
                aspectRatio: 1,
                viewMode: 1,
                zoomable: true,
            });
            return function (idx) {
                previewContainer.innerHTML = "";
                const canvas = cropper.getCroppedCanvas();
                canvas.toBlob(async (blob) => {
                    const croppedFile = new File([blob], file.name, { type: file.type });
                    imageUrls.splice(idx, 1, croppedFile);
                    await resetPreview(imageUrls);
                    updateImageInputFiles();
                });
            };
        }

        imageInput.addEventListener("change", async (e) => {
            const files = e.target.files;
            if (files) {
                await resetPreview(files, true)
            }
        });

        async function resetPreview(files, inputEvent = false) {

            // Check if the total number of images is more than 3
            if (files.length + imageUrls.length > 2) {
                // Show an error message or handle the exceeding limit appropriately
                console.log("Cannot upload more than 3 images");
                return;
            }

            await [...files].forEach((file, index) => {
                if (file.type.startsWith('image/')) { // Check if it's an image
                    const reader = new FileReader();
                    reader.onload = () => {
                        const imgContainer = document.createElement("div");
                        imgContainer.classList.add("image-container");

                        const img = document.createElement("img");
                        img.src = reader.result;
                        img.classList.add("preview-image");
                        img.onload = () => {
                            if (img.width > 150 || img.height > 150) {
                                if (img.width > img.height) {
                                    img.style.width = "150px";
                                    img.style.height = "auto";
                                } else {
                                    img.style.height = "150px";
                                    img.style.width = "auto";
                                }
                            }
                        };

                        let urlIndex;
                        if (inputEvent) {
                            urlIndex = imageUrls.push(file) - 1;
                        } else {
                            urlIndex = index;
                        }

                        updateImageInputFiles();
                        imgContainer.dataset.index = urlIndex;

                        const editIcon = document.createElement("i");
                        editIcon.classList.add("fas", "fa-edit", "edit-icon");
                        editIcon.setAttribute("aria-hidden", "true");
                        const submitBtn = document.createElement("button");
                        submitBtn.classList.add("d-none");
                        editIcon.addEventListener("click", (event) => {
                            submitBtn.classList.remove('d-none')
                            // Check if cropper already exists
                            if (!img.dataset.cropperInitialized) {
                                const cropper = createCropper(img, file);
                                submitBtn.addEventListener('click', (e) => {
                                    e.preventDefault();
                                    cropper(urlIndex);
                                });
                                img.dataset.cropperInitialized = true;
                            }
                        });

                        const actionDiv = document.createElement('div');
                        actionDiv.classList.add("d-flex", "justify-content-between");
                        const deleteIcon = document.createElement("i");
                        deleteIcon.classList.add("fas", "fa-trash", "delete-icon");
                        deleteIcon.setAttribute("aria-hidden", "true");
                        submitBtn.type = "button";
                        submitBtn.textContent = "Crop"
                        submitBtn.style.backgroundColor = "black";
                        submitBtn.style.color = "white";
                        submitBtn.style.borderRadius = "5px";


                        deleteIcon.addEventListener("click", (event) => {
                            const urlIndex = parseInt(imgContainer.dataset.index);
                            if (!isNaN(urlIndex)) {
                                imageUrls.splice(urlIndex, 1);
                                imgContainer.remove();
                                updateImageInputFiles();
                            }
                        })

                        imgContainer.appendChild(img);
                        imgContainer.appendChild(editIcon);
                        actionDiv.appendChild(deleteIcon);
                        actionDiv.appendChild(submitBtn);
                        imgContainer.appendChild(actionDiv);

                        previewContainer.appendChild(imgContainer);
                    };
                    reader.readAsDataURL(file);
                }
            });
        }
        function updateImageInputFiles() {
            imageInput.value = "";
            const dataTransfer = new DataTransfer();
            imageUrls.forEach(file => {
                dataTransfer.items.add(file);
            });
            imageInput.files = dataTransfer.files;
        }

    </script> -->


    <%#- include('include/_footer') %>