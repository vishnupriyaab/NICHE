<%- include('include/_header') %>

    <style>
        #existingImageList {
            display: flex;
            gap: 30px;
            list-style-type: none;
            padding: 0;
        }

        #existingImageList li {
            display: flex;
            flex-direction: column;
            align-items: start;
        }

        #existingImageList li a {
            margin-top: 10px;
        }
    </style>

    <div class="container" style="margin-left: 310px;">
        <h1>Edit Product</h1>
        <form action="/updateproduct/<%= product._id %>" id="updateForm" enctype="multipart/form-data">
            <p id="allFieldError" class="text-danger"></p>
            <div class="row mb-3 mt-10">
                <div class="col-md-6">
                    <label for="name" class="form-label fw-bold">Product Name:</label>
                    <input type="text" class="form-control" id="name" name="name" value="<%= product.name %>">
                    <p id="name-error" class="text-danger"></p>
                </div>
            </div>
            <div class="d-flex gap-4">
                <div class="mb-3">
                    <label for="price" class="form-label fw-bold">Price:</label>
                    <div class="input-group">
                        <span class="input-group-text">â‚¹</span>
                        <input type="number" class="form-control" id="price" name="price" min="0"
                            value="<%= product.price %>">
                    </div>
                    <p id="price-error" class="text-danger"></p>
                </div>

                <div class="mb-3">
                    <label for="stock" class="form-label fw-bold">Stock:</label>
                    <input type="number" class="form-control" id="stock" name="stock" min="0"
                        value="<%= product.stock %>">
                    <p id="stock-error" class="text-danger"></p>

                </div>
                <div class="mb-3">
                    <label for="category" class="form-label fw-bold">Category:</label>
                    <select class="form-select" name="category" id="category">
                        <% category.forEach(category=> { %>
                            <option <%=category._id.toString()===product.category._id.toString() ? 'selected' : '' %> >
                                <%= category.name %>
                            </option>
                            <% }); %>
                    </select>
                </div>
                <div class="mb-3">
                    <label for="color" class="form-label fw-bold">Color:</label>
                    <input type="text" class="form-control" id="color" name="color" value="<%= product.color %>">
                    <p id="color-error" class="text-danger"></p>
                </div>
                <div class="mb-3">
                    <label for="size" class="form-label fw-bold">Size:</label>
                    <select class="form-select" name="size" id="size">
                        <option value="3">3</option>
                        <option value="4">4</option>
                        <option value="5">5</option>
                        <option value="6">6</option>
                        <option value="6">7</option>
                        <option value="6">8</option>
                    </select>
                </div>
            </div>
            <div class="mb-4">
                <label class="form-label fw-bold">Description</label>
                <textarea placeholder="Type here" name="description" class="form-control" rows="4"
                    id="description"><%= product.description %></textarea>
                <p id="description-error" class="text-danger"></p>
            </div>


            <div class="mb-3">
                <label for="images" class="form-label fw-bold">Upload new images:</label>
                <input type="file" class="form-control" id="images" name="images" multiple>
                <p id="imgArr-error" class="text-danger"></p>
                <small class="text-muted">Drag and drop multiple images or click to select.</small>
            </div>

            <% if (product.imgArr.length> 0) { %>
                <div class="mb-3">
                    <h5>Existing Images:</h5>
                    <ul id="existingImageList">
                        <% product.imgArr.forEach((image, i)=> { %>
                            <li>
                                <img src="<%= image %>" width="100" alt="Product Image">
                                <a href="#" data-image-url="<%= image %>">
                                    <i class="fa fa-trash" aria-hidden="true"
                                        onclick="deleteImage('<%= i %>', '<%= product._id %>')"></i>
                                </a>
                                <button type="button" class="crop-button" onclick="cropExistingImage('<%= i %>', '<%= image %>')">Crop</button>
                            </li>
                            <% }); %>
                                <div id="imagePreviewContainer" class="d-flex flex-wrap"
                                    style="width: 100px; height: 100px;"></div>
                    </ul>
                </div>

                <% } %>
                    <button type="submit" class="btn btn-primary" style="margin-bottom: 7rem;">Update
                        Product</button>
        </form>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script src="https://code.jquery.com/jquery-3.7.1.slim.min.js"
        integrity="sha256-kmHvs0B+OpCW5GVHUNjv9rOmY0IvSIRcf7zGUDTDQM8=" crossorigin="anonymous">
        </script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

    <!-- 
    <script>
        const removeImageButtons = document.getElementsByClassName('remove-image');

        Array.from(removeImageButtons).forEach((button) => {
            button.addEventListener('click', (event) => {
                event.preventDefault();
                const imageUrl = button.dataset.imageUrl;
            });
        });

        document.getElementById('updateForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            if (!validateForm()) {
                return false;
            }

            let uploadedImage = [];

            for (let i = 0; i < document.getElementById('images').files.length; i++) {
                uploadedImage[i] = await convertBase64(document.getElementById('images').files[i]);
            }

            axios
                .put(document.getElementById('updateForm').getAttribute('action'), {
                    productname: document.getElementById('name').value,
                    category: document.getElementById('category').value,
                    price: document.getElementById('price').value,
                    color: document.getElementById('color').value,
                    size: document.getElementById('size').value,
                    stock: document.getElementById('stock').value,
                    description: document.getElementById('description').value,
                    imgArr: uploadedImage,
                }).then((response) => {
                    console.log(response, "responseeesesesees");
                    window.location.href = '/products'
                })
        });

        function validateForm() {
            resetErrors();

            let isValid = true;

            // Get form input values
            const productName = document.getElementById('name').value;
            const category = document.getElementById('category').value;
            const price = document.getElementById('price').value;
            const color = document.getElementById('color').value;
            const size = document.getElementById('size').value;
            const stock = document.getElementById('stock').value;
            const description = document.getElementById('description').value;
            const imgArr = document.getElementById('images').files;
            const imageList = document.getElementById('existingImageList');

            // Perform validation checks
            if (!productName) {
                displayError('name', 'Please enter product name');
                isValid = false;
            } else if (/^\s*$/.test(productName)) {
                displayError('name', 'Product name cannot be only spaces');
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(productName)) {
                displayError('name', 'Product Name cannot contain numbers or special characters');
                isValid = false;
            } else if (productName.length > 30) {
                displayError('name', 'Product Name should be almost 30 characters long');
                isValid = false;
            }

            if (!category) {
                displayError('category', 'Please select a category');
                isValid = false;
            }

            if (!price) {
                displayError('price', 'Please enter price');
                isValid = false;
            } else if (isNaN(price)) {
                displayError('price', 'Price must be a valid number');
                isValid = false;
            } else if (price < 0 || price > 10000) {
                displayError('price', 'Price must be between 0 and 10000');
                isValid = false;
            }


            if (!stock) {
                displayError('stock', 'Please enter Stock');
                isValid = false;
            } else if (isNaN(stock)) {
                displayError('stock', 'Stock must be a valid number');
                isValid = false;
            } else if (isNaN(stock < 0 || stock > 1000)) {
                displayError('stock', 'Stock must be between 0 and 1000');
                isValid = false;
            }

            if (!color) {
                displayError('color', 'Please enter color');
                isValid = false;
            } else if (/^\s*$/.test(color)) {
                displayError('color', 'Color cannot be fully spaces');
                isValid = false;
            }

            if (!description) {
                displayError('description', 'Please enter description');
                isValid = false;
            } else if (description.length > 30) {
                displayError('description', 'Description cannot exceed 30 characters');
                isValid = false;
            } else if (/^\s*$/.test(description)) {
                displayError('description', 'Description cannot be fully spaces');
                isValid = false;
            }

            if (!size) {
                displayError('size', 'Please enter size');
                isValid = false;
            }


            const imageCount = imageList.getElementsByTagName('li').length;
            console.log(imageCount, "imageCount");


            // Image validation
            for (let i = 0; i < imgArr.length; i++) {
                const file = imgArr[i];
                const result = imgArr[i];
                const maxSize = 5 * 1024 * 1024; // 5MB
                const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
                const maxFiles = 3
                const allowableImages = maxFiles - imageCount;
                console.log(allowableImages, "allowableImages");

                if (allowableImages > maxFiles || allowableImages <= 0) {
                    displayError('imgArr', `Totally ${maxFiles} images are allowed, already ${imageCount} images are exists`);
                    isValid = false;
                }
                if (file.size > maxSize) {
                    displayError('imgArr', `Image ${file.name} exceeds the maximum size of 5MB`);
                    isValid = false;
                }
                if (!allowedTypes.includes(file.type)) {
                    displayError('imgArr', 'Only jpeg, png, gif file types are allowed to image');
                    isValid = false;
                }
            }

            return isValid;
        }

        function displayError(fieldId, errorMessage) {
            const errorElement = document.getElementById(fieldId + '-error');
            errorElement.textContent = errorMessage;
            errorElement.style.display = 'block';
        }

        function resetErrors() {
            const errorElements = document.querySelectorAll('.error-message');
            errorElements.forEach((element) => {
                element.textContent = '';
                element.style.display = 'none';
            });
        }



        function convertBase64(file) {
            return new Promise((resolve, reject) => {
                const fileReader = new FileReader();
                fileReader.readAsDataURL(file);
                fileReader.onload = () => {
                    resolve(fileReader.result);
                };
                fileReader.onerror = (error) => {
                    reject(error);
                };
            });
        }


        function deleteImage(i, productId) {
            Swal.fire({
                title: 'Are you sure to Delete this image?',
                text: 'You won\'t be able to revert this!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    console.log(i);
                    console.log(productId);
                    axios.delete(`/deleteimage/${i}/${productId}`)
                        .then(response => {
                            console.log('Image deleted successfully');
                            location.reload();
                        })
                        .catch(error => {
                            console.error('Error deleting image:', error);
                        });
                }
            });
        }

    </script> -->

    <script>
        const imageInput = document.getElementById("images");
        const previewContainer = document.getElementById("imagePreviewContainer");
        let imageUrls = [];

        function createCropper(img, file) {
            const cropper = new Cropper(img, {
                aspectRatio: 1,
                viewMode: 1,
                zoomable: true,
            });
            return function (idx) {
                const canvas = cropper.getCroppedCanvas();
                canvas.toBlob(async (blob) => {
                    const croppedFile = new File([blob], file.name, { type: file.type });
                    imageUrls.splice(idx, 1, croppedFile);
                    await resetPreview(imageUrls);
                    updateImageInputFiles();
                });
            };
        }

        imageInput.addEventListener("change", async (e) => {
            const files = e.target.files;
            if (files) {
                await resetPreview(files, true);
            }
        });

        async function resetPreview(files, inputEvent = false) {
            previewContainer.innerHTML = ""; // Clear previous previews
            await [...files].forEach((file, index) => {
                if (file.type.startsWith('image/')) { // Check if it's an image
                    const reader = new FileReader();
                    reader.onload = () => {
                        const imgContainer = document.createElement("div");
                        imgContainer.classList.add("image-container");

                        const img = document.createElement("img");
                        img.src = reader.result;
                        img.classList.add("preview-image");

                        let urlIndex;
                        if (inputEvent) {
                            urlIndex = imageUrls.push(file) - 1;
                        } else {
                            urlIndex = index;
                        }

                        imgContainer.dataset.index = urlIndex;
                        updateImageInputFiles();

                        const editIcon = document.createElement("i");
                        editIcon.classList.add("fas", "fa-edit", "edit-icon");
                        editIcon.setAttribute("aria-hidden", "true");
                        const submitBtn = document.createElement("button");
                        submitBtn.classList.add("d-none");
                        submitBtn.textContent = "Crop";
                        submitBtn.type = "button";
                        submitBtn.style.backgroundColor = "black";
                        submitBtn.style.color = "white";
                        submitBtn.style.borderRadius = "5px";

                        editIcon.addEventListener("click", (event) => {
                            submitBtn.classList.remove('d-none');
                            if (!img.dataset.cropperInitialized) {
                                const cropper = createCropper(img, file);
                                submitBtn.addEventListener('click', (e) => {
                                    e.preventDefault();
                                    cropper(urlIndex);
                                });
                                img.dataset.cropperInitialized = true;
                            }
                        });

                        const actionDiv = document.createElement('div');
                        actionDiv.classList.add("d-flex", "justify-content-between");

                        const deleteIcon = document.createElement("i");
                        deleteIcon.classList.add("fas", "fa-trash", "delete-icon");
                        deleteIcon.setAttribute("aria-hidden", "true");

                        deleteIcon.addEventListener("click", (event) => {
                            const urlIndex = parseInt(imgContainer.dataset.index);
                            if (!isNaN(urlIndex)) {
                                imageUrls.splice(urlIndex, 1);
                                imgContainer.remove();
                                updateImageInputFiles();
                            }
                        });

                        imgContainer.appendChild(img);
                        imgContainer.appendChild(editIcon);
                        actionDiv.appendChild(deleteIcon);
                        actionDiv.appendChild(submitBtn);
                        imgContainer.appendChild(actionDiv);

                        previewContainer.appendChild(imgContainer);
                    };
                    reader.readAsDataURL(file);
                }
            });
        }

        function updateImageInputFiles() {
            imageInput.value = "";
            const dataTransfer = new DataTransfer();
            imageUrls.forEach(file => {
                dataTransfer.items.add(file);
            });
            imageInput.files = dataTransfer.files;
        }

        document.getElementById('updateForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            if (!validateForm()) {
                return false;
            }

            let uploadedImage = [];

            for (let i = 0; i < imageUrls.length; i++) {
                uploadedImage[i] = await convertBase64(imageUrls[i]);
            }

            axios.put(document.getElementById('updateForm').getAttribute('action'), {
                productname: document.getElementById('name').value,
                category: document.getElementById('category').value,
                price: document.getElementById('price').value,
                color: document.getElementById('color').value,
                size: document.getElementById('size').value,
                stock: document.getElementById('stock').value,
                description: document.getElementById('description').value,
                imgArr: uploadedImage,
            }).then((response) => {
                console.log(response, "responseeesesesees");
                window.location.href = '/products';
            });
        });

        // Convert file to Base64
        function convertBase64(file) {
            return new Promise((resolve, reject) => {
                const fileReader = new FileReader();
                fileReader.readAsDataURL(file);
                fileReader.onload = () => {
                    resolve(fileReader.result);
                };
                fileReader.onerror = (error) => {
                    reject(error);
                };
            });
        }

        // Delete image function
        function deleteImage(i, productId) {
            Swal.fire({
                title: 'Are you sure to Delete this image?',
                text: 'You won\'t be able to revert this!',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    axios.delete(`/deleteimage/${i}/${productId}`)
                        .then(response => {
                            console.log('Image deleted successfully');
                            location.reload();
                        })
                        .catch(error => {
                            console.error('Error deleting image:', error);
                        });
                }
            });
        }

        function cropExistingImage(index, imageUrl) {
            const img = document.querySelector(`#existingImageList li:nth-child(${index + 1}) img`);
            if (img) {
                const file = new File([imageUrl], `existingImage${index}.jpg`);
                const cropper = createCropper(img, file);
                cropper(index); // Call the cropper function with the index
            }
        }

        function validateForm() {
            resetErrors();

            let isValid = true;

            // Get form input values
            const productName = document.getElementById('name').value;
            const category = document.getElementById('category').value;
            const price = document.getElementById('price').value;
            const color = document.getElementById('color').value;
            const size = document.getElementById('size').value;
            const stock = document.getElementById('stock').value;
            const description = document.getElementById('description').value;
            const imgArr = document.getElementById('images').files;
            const imageList = document.getElementById('existingImageList');

            // Perform validation checks
            if (!productName) {
                displayError('name', 'Please enter product name');
                isValid = false;
            } else if (/^\s*$/.test(productName)) {
                displayError('name', 'Product name cannot be only spaces');
                isValid = false;
            } else if (!/^[a-zA-Z\s]+$/.test(productName)) {
                displayError('name', 'Product Name cannot contain numbers or special characters');
                isValid = false;
            } else if (productName.length > 30) {
                displayError('name', 'Product Name should be almost 30 characters long');
                isValid = false;
            }

            if (!category) {
                displayError('category', 'Please select a category');
                isValid = false;
            }

            if (!price) {
                displayError('price', 'Please enter price');
                isValid = false;
            } else if (isNaN(price)) {
                displayError('price', 'Price must be a valid number');
                isValid = false;
            } else if (price < 0 || price > 10000) {
                displayError('price', 'Price must be between 0 and 10000');
                isValid = false;
            }


            if (!stock) {
                displayError('stock', 'Please enter Stock');
                isValid = false;
            } else if (isNaN(stock)) {
                displayError('stock', 'Stock must be a valid number');
                isValid = false;
            } else if (isNaN(stock < 0 || stock > 1000)) {
                displayError('stock', 'Stock must be between 0 and 1000');
                isValid = false;
            }

            if (!color) {
                displayError('color', 'Please enter color');
                isValid = false;
            } else if (/^\s*$/.test(color)) {
                displayError('color', 'Color cannot be fully spaces');
                isValid = false;
            }

            if (!description) {
                displayError('description', 'Please enter description');
                isValid = false;
            } else if (description.length > 30) {
                displayError('description', 'Description cannot exceed 30 characters');
                isValid = false;
            } else if (/^\s*$/.test(description)) {
                displayError('description', 'Description cannot be fully spaces');
                isValid = false;
            }

            if (!size) {
                displayError('size', 'Please enter size');
                isValid = false;
            }


            const imageCount = imageList.getElementsByTagName('li').length;
            console.log(imageCount, "imageCount");


            // Image validation
            for (let i = 0; i < imgArr.length; i++) {
                const file = imgArr[i];
                const result = imgArr[i];
                const maxSize = 5 * 1024 * 1024; // 5MB
                const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
                const maxFiles = 3
                const allowableImages = maxFiles - imageCount;
                console.log(allowableImages, "allowableImages");

                if (allowableImages > maxFiles || allowableImages <= 0) {
                    displayError('imgArr', `Totally ${maxFiles} images are allowed, already ${imageCount} images are exists`);
                    isValid = false;
                }
                if (file.size > maxSize) {
                    displayError('imgArr', `Image ${file.name} exceeds the maximum size of 5MB`);
                    isValid = false;
                }
                if (!allowedTypes.includes(file.type)) {
                    displayError('imgArr', 'Only jpeg, png, gif file types are allowed to image');
                    isValid = false;
                }
            }
            return isValid;
        }

        function displayError(fieldId, errorMessage) {
            const errorElement = document.getElementById(fieldId + '-error');
            errorElement.textContent = errorMessage;
            errorElement.style.display = 'block';
        }

        function resetErrors() {
            const errorElements = document.querySelectorAll('.error-message');
            errorElements.forEach((element) => {
                element.textContent = '';
                element.style.display = 'none';
            });
        }
    </script>


    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>


    <%- include('include/_footer') %>