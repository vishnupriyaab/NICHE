<%- include('include/_header') %>

<div class="flex-grow" style="margin-top: 120px">
  <div class="container mx-auto my-8 p-8 bg-white rounded shadow">
    <!-- Back button -->
    <a
      href="#"
      onclick="goBack()"
      class="inline-flex items-center mb-2 px-4 py-2 text-base font-medium rounded-md text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 mr-auto"
    >
      <svg
        class="h-4 w-4 mr-2"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M10 19l-7-7m0 0l7-7m-7 7h18"
        ></path>
      </svg>
      Back
    </a>
    <h1 class="text-2xl font-bold mb-4">Your Orders</h1>

    <div class="overflow-x-auto">
      <table class="w-full bg-white border border-gray-300">
        <tbody>
          <!-- Replace the following block with your actual order data -->
          <% for (let i=0; i < orders.length; i++) { %>

          <tr class="hover:bg-gray-100">
            <td><%= i+1 %></td>
            <td
              class="py-2 px-4 border-b cursor-pointer"
              onclick="location.href = '/orderinformation/<%= orders[i].orderDetails._id %>'"
            >
              <img
                src="<%= orders[i].orderDetails.pImage %>"
                alt="Product Image"
                class="h-16 w-16 object-cover rounded"
              />
            </td>
            <td
              class="py-2 px-4 border-b cursor-pointer"
              onclick="location.href = '/orderinformation/<%= orders[i].orderDetails._id %>'"
            >
              <%= orders[i].orderDetails.pName %>
            </td>
            <td
              class="py-2 px-4 border-b"
              onclick="location.href = '/orderinformation/<%= orders[i].orderDetails._id %>'"
            >
              Order Date: <%=
              orders[i].orderDetails.orderDate.toISOString().split("T")[0].split("-").reverse().join("-")
              %>
              <br />
              <% if (orders[i].couponDiscount) { %> Coupon Discount: ₹<%=
              orders[i].couponDiscount %> <% } %>
            </td>
            <td
              class="py-2 px-4 border-b cursor-pointer"
              onclick="location.href = '/orderinformation/<%= orders[i].orderDetails._id %>'"
            >
              Quantity: <%= orders[i].orderDetails.quantity %>
            </td>
            <td
              class="py-2 px-4 border-b cursor-pointer"
              onclick="location.href = '/orderinformation/<%= orders[i].orderDetails._id %>'"
            >
              <% if (orders[i].orderDetails.price > orders[i].totalsum) { %>
              Product Price: ₹ <%= Math.ceil(orders[i].totalsum) %> <% } else {
              %> Product Price: ₹ <%= Math.ceil(orders[i].orderDetails.price)
              %> <% } %>
            </td>

            <td
              class="py-2 px-5 border-b cursor-pointer"
              onclick="location.href = '/orderinformation/<%= orders[i].orderDetails._id %>'"
            >
              <span class="bg-green-500 text-white py-1 px-2 rounded ">
                <%= orders[i].orderDetails.orderStatus %>
              </span>
            </td>
            <% if(orders[i].orderDetails.paymentStatus === 'Pending'){ %>
                <td class="py-2 px-4 border-b">
                  <button
                    class="bg-blue-500 text-white py-1 px-4 rounded"
                    onclick="retryPayment('<%= orders[i]._id %>','<%= orders[i].orderDetails.productId %>')"
                  >
                    Retry Payment
                  </button>
                </td>
            <% } %> <% if((orders[i].orderDetails.orderStatus==='Ordered' ) ||
            (orders[i].orderStatus==='Shipped' ) ) { %>
            <td class="py-2 px-4 border-b">
              <button
                class="bg-red-500 text-white py-1 px-2 rounded"
                onclick="openCancelModal()"
              >
                Cancel
              </button>
            </td>
            <div
              class="fixed z-50 inset-0 overflow-y-auto hidden"
              id="cancelModalBackdrop"
            >
              <div class="flex items-center justify-center min-h-screen">
                <div
                  class="bg-white rounded-lg shadow-xl p-4 mx-4 sm:max-w-lg sm:w-full"
                >
                  <div class="mb-4">
                    <h2 class="text-lg font-semibold">
                      Enter Reason for Cancelling
                    </h2>
                  </div>

                  <div>
                    <textarea
                      class="w-full border rounded-md p-2"
                      rows="4"
                      placeholder="Enter reason for cancellation..."
                    ></textarea>
                  </div>

                  <div class="mt-4 flex justify-end">
                    <button
                      class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md mr-2"
                      onclick="closeCancelModal()"
                    >
                      Close
                    </button>
                    <button
                      class="bg-blue-500 text-white px-4 py-2 rounded-md"
                      onclick="cancelOrder('<%= orders[i]._id %>','<%= orders[i].orderDetails._id %>')"
                    >
                      Submit
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <% } else if (orders[i].orderDetails.orderStatus==='Delivered' ) {
            %>
            <td>
              <button
                class="py-2 px-4"
                onclick="downloadInvoice('<%= orders[i]._id %>')"
              >
                <i class="fa-solid fa-download"></i>
                <p>Invoice</p>
              </button>
            </td>
            <td class="py-2 px-4 border-b">
              <button
                class="bg-red-500 text-white py-1 px-2 rounded"
                onclick="openReturnModal()"
              >
                Return
              </button>
            </td>
            <div
              class="fixed z-50 inset-0 overflow-y-auto hidden"
              id="returnModalBackdrop"
            >
              <div class="flex items-center justify-center min-h-screen">
                <div
                  class="bg-white rounded-lg shadow-xl p-4 mx-4 sm:max-w-lg sm:w-full"
                >
                  <div class="mb-4">
                    <h2 class="text-lg font-semibold">
                      Enter Reason for Returning
                    </h2>
                  </div>

                  <div>
                    <textarea
                      class="w-full border rounded-md p-2"
                      rows="4"
                      placeholder="Enter reason for return..."
                    ></textarea>
                  </div>

                  <div class="mt-4 flex justify-end">
                    <button
                      class="bg-gray-300 text-gray-700 px-4 py-2 rounded-md mr-2"
                      onclick="closeReturnModal()"
                    >
                      Close
                    </button>
                    <button
                      class="bg-blue-500 text-white px-5 py-2 rounded-md"
                      onclick="returnOrder('<%= orders[i].orderDetails._id %>')"
                    >
                      Submit
                    </button>
                  </div>
                </div>
              </div>
            </div>
            <% } %>
          </tr>
          <% } %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<script src="https://cdn.tailwindcss.com"></script>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.6.7/axios.min.js"
  integrity="sha512-NQfB/bDaB8kaSXF8E77JjhHG5PM6XVRxvHzkZiwl3ddWCEPBa23T76MuWSwAJdMGJnmQqM0VeY9kFszsrBEFrQ=="
  crossorigin="anonymous"
  referrerpolicy="no-referrer"
></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link
  rel="stylesheet"
  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
  integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
  crossorigin="anonymous"
  referrerpolicy="no-referrer"
/>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
  async function retryPayment(ordersId, productId) {
    console.log(ordersId, productId, "dfghjkl");
    Swal.fire({
      title: "Are you sure?",
      text: "You want to be Retry the Payment!",
      icon: "info",
      showCancelButton: true,
      confirmButtonColor: "#000000",
      cancelButtonColor: "#d33",
      confirmButtonText: "Yes Retry!",
    }).then(async (result) => {
      if (result.isConfirmed) {
        const response = await axios.post(`/retryPayment?id=${ordersId}`);
        if (response.data?.order) {
          razorPayPayment(response.data.order, productId);
        }
      }
    });
  }

  function razorPayPayment(order, productId) {
    console.log("11111");
    var options = {
      key: "rzp_test_wV96XGA4SLLOo7",
      amount: order.amount,
      currency: "INR",
      name: "Niche",
      description: "Test Transaction",
      image: "https://example.com/your_logo",
      order_id: order.id,
      handler: function (response) {
        verifyRetryPayment(response, order, productId);
      },
      prefill: {
        name: "Gaurav Kumar",
        email: "gaurav.kumar@example.com",
        contact: "9000090000",
      },
      notes: {
        address: "Razorpay Corporate Office",
      },
      theme: {
        color: "#3399cc",
      },
    };
    var rzp1 = new Razorpay(options);
    rzp1.on("payment.failed", function (response) {
      window.location.href = "/orders";
    });
    rzp1.open();
    return;
  }

  function verifyRetryPayment(response, order, productId) {
    var settings = {
      url: "/paymentRetryVerify",
      method: "POST",
      timeout: 0,
      headers: {
        "Content-Type": "application/json",
      },
      data: JSON.stringify({
        orderId: order.id,
        paymentId: response.razorpay_payment_id,
        signature: response.razorpay_signature,
        newOrderId: order.receipt,
        productId,
      }),
    };
    $.ajax(settings)
      .done(function (data) {
        if (data.success) {
          window.location.reload();
        } else {
          alert("Payment verification failed. please try again.");
        }
      })
      .fail(function (jqXHR, textStatus, errorThrown) {
        console.error(("Error verifying Payment", textStatus, errorThrown));
        alert(
          "An error occurred while verifying your payment. Please try again."
        );
      });
  }
</script>

<script>
  async function downloadInvoice(orderId) {
    try {
      const response = await fetch(`/downloadInvoice/${orderId}`);
      console.log(response, "response");
      if (!response.ok) {
        throw new Error("Failed to download invoice.");
      }
      const blob = await response.blob();

      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `invoice_${orderId}.pdf`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error("Error downloading invoice:", error);
    }
  }
</script>

<script>
  async function goBack() {
    window.history.back();
  }

  function cancelOrder(orderId, singleOrderId) {
    axios
      .post("/cancelOrder", { orderId , singleOrderId })
      .then((data) => {
        if (data) {
          Swal.fire("Order Cancelled", "Click the button", "success").then(
            () => {
              window.location.reload();
            }
          );
        }
      })
      .catch((error) => {
        console.error("Error cancelling order:", error);
      });
  }

  function returnOrder(orderId) {
    axios
      .post("/returnOrder", { orderId })
      .then((data) => {
        if (data) {
          Swal.fire("Order Returned", "Click the button", "success").then(
            () => {
              window.location.reload();
            }
          );
        }
      })
      .catch((error) => {
        console.error("Error returning order:", error);
      });
  }

  function openCancelModal() {
    document.getElementById("cancelModalBackdrop").classList.remove("hidden");
    document.body.classList.add("overflow-hidden");
  }

  function closeCancelModal() {
    document.getElementById("cancelModalBackdrop").classList.add("hidden");
    document.body.classList.remove("overflow-hidden");
  }

  function openReturnModal() {
    document.getElementById("returnModalBackdrop").classList.remove("hidden");
    document.body.classList.add("overflow-hidden");
  }

  function closeReturnModal() {
    document.getElementById("returnModalBackdrop").classList.add("hidden");
    document.body.classList.remove("overflow-hidden");
  }
</script>

<%- include('include/_footer') %>
